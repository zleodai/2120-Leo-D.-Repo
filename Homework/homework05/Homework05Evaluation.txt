
Homework05 Evaluation
======================

scoring:
=============================
Tree Traverser
   inOrderTraverser method implemented       [1 pt.]
   2 test sets with at least minimal nodes   [2 pt.]
   produces proper sequences                 [2 pt.]

Priority Queue
   Queue creation works correctly            [1 pt.]
   insertion works correctly                 [1 pt.]
   isFull() works correctly                  [1 pt.]
   isEmpty() works correctly                 [1 pt.]
   removal() works correctly                 [1 pt.]
   heap representation works correctly       [1 pt.]

Linear Probing String Hasher
   menu works [gimme, has to work if there]  [1 pt.]
   shows contents                            [1 pt.]
   hash table created correctly              [1 pt.]
   insertion works correctly                 [0.5 pt.]
   linear probing works correctly            [0 pt.]
   deletion works correctly                  [0 pt.]
   finding works correctly                   [0 pt.]

Digit Folding Hasher
   menu works [gimme, has to work if there]  [1 pt.]
   shows contents                            [1 pt.]
   insertion works correctly                 [1 pt.]
   linear probing works correctly            [1 pt.]
   deletion works correctly                  [1 pt.]
   finding works correctly                   [1 pt.]

Coding style                                 [1 pt.]
Tests written to test all classes            [1 pt.]
Headers in all files                         [4 pt.]

Total possible is 30 points
   24 out of 30 is 80.00% which is a B-minus
-------------------------
EVALUATION COMMENTS:

Traverser ~ an interesting way to build the tree!  Meets the criteria since
you build a tree and then do an in-order traversal on it.  Nice!

In spite of your note [thx, BTW] it appears that the Heap-based Priority
Queue is working just fine.  Reading through the code, it's all there.

Not sure I can say the same for the HashTableApp.  The idea for this one is
to take a user input and hash the value, then insert it into the hash table.
You also need a way to let the user select when to print out the values in
the table so that the insertions/removals can be seen.  Also, there needs to
be a 'find' operation.  None of that is implemented.  There should have been
a menu of sorts to allow the user to do those operations.  Also, there is no
demonstration of linear probing which should be shown by inserting the same
value twice and showing that the table has two copies side by side.

The same can be said for the digit folding hasher.  You don't show how the
operations are working.  It would be helpful to have a way to show the whole
table so the user can add one value and see where it went.

Your code is VERY nice looking!  You earn half credit for having written the
code but without tests it can't be the whol magilla....

============================================================================
progress on the semester so far:

   homework01  100.00% of  5 points =  5.00 points
   homework02  100.00% of  5 points =  5.00 points
   homework03  100.00% of  5 points =  5.00 points
   homework04   57.50% of  5 points =  2.88 points
   homework05   80.00% of  5 points =  4.00 points
             total homework points = 25.00 out of 25 = 87.52%
                           which is a b-plus


It's been a pleasure having you in the course this semester and I look
forward to seeing you in the future.



